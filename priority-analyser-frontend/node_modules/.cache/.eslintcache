[{"C:\\Users\\Dell\\Desktop\\project\\backend_admission\\priority-analyser-frontend\\src\\index.js":"1","C:\\Users\\Dell\\Desktop\\project\\backend_admission\\priority-analyser-frontend\\src\\App.js":"2","C:\\Users\\Dell\\Desktop\\project\\backend_admission\\priority-analyser-frontend\\src\\reportWebVitals.js":"3","C:\\Users\\Dell\\Desktop\\project\\backend_admission\\priority-analyser-frontend\\src\\lib\\api.js":"4","C:\\Users\\Dell\\Desktop\\project\\backend_admission\\priority-analyser-frontend\\src\\components\\Layout.js":"5","C:\\Users\\Dell\\Desktop\\project\\backend_admission\\priority-analyser-frontend\\src\\prediction\\index.js":"6","C:\\Users\\Dell\\Desktop\\project\\backend_admission\\priority-analyser-frontend\\src\\analysis\\index.js":"7","C:\\Users\\Dell\\Desktop\\project\\backend_admission\\priority-analyser-frontend\\src\\new\\index.js":"8","C:\\Users\\Dell\\Desktop\\project\\backend_admission\\priority-analyser-frontend\\src\\faq\\index.js":"9","C:\\Users\\Dell\\Desktop\\project\\backend_admission\\priority-analyser-frontend\\src\\Location\\index.js":"10","C:\\Users\\Dell\\Desktop\\project\\backend_admission\\priority-analyser-frontend\\src\\components\\Dropdown.js":"11","C:\\Users\\Dell\\Desktop\\project\\backend_admission\\priority-analyser-frontend\\src\\components\\BottomNav.js":"12","C:\\Users\\Dell\\Desktop\\project\\backend_admission\\priority-analyser-frontend\\src\\faq\\table.js":"13","C:\\Users\\Dell\\Desktop\\project\\backend_admission\\priority-analyser-frontend\\src\\components\\search.js":"14","C:\\Users\\Dell\\Desktop\\project\\backend_admission\\priority-analyser-frontend\\src\\analysis\\AllCollegeOneFac.js":"15","C:\\Users\\Dell\\Desktop\\project\\backend_admission\\priority-analyser-frontend\\src\\analysis\\OneCollegeOneFac.js":"16","C:\\Users\\Dell\\Desktop\\project\\backend_admission\\priority-analyser-frontend\\src\\analysis\\OneCollegeAllFac.js":"17","C:\\Users\\Dell\\Desktop\\project\\backend_admission\\priority-analyser-frontend\\src\\new\\chart.js":"18","C:\\Users\\Dell\\Desktop\\project\\backend_admission\\priority-analyser-frontend\\src\\Location\\Zone.js":"19","C:\\Users\\Dell\\Desktop\\project\\backend_admission\\priority-analyser-frontend\\src\\Location\\District.js":"20","C:\\Users\\Dell\\Desktop\\project\\backend_admission\\priority-analyser-frontend\\src\\visualizations\\BarChart.js":"21","C:\\Users\\Dell\\Desktop\\project\\backend_admission\\priority-analyser-frontend\\src\\visualizations\\RangeChart.js":"22","C:\\Users\\Dell\\Desktop\\project\\backend_admission\\priority-analyser-frontend\\src\\visualizations\\PieChart.js":"23","C:\\Users\\Dell\\Desktop\\project\\backend_admission\\priority-analyser-frontend\\src\\Location\\metadata\\districtMapData.js":"24","C:\\Users\\Dell\\Desktop\\project\\backend_admission\\priority-analyser-frontend\\src\\Location\\metadata\\zoneMapData.js":"25"},{"size":511,"mtime":1686668957713,"results":"26","hashOfConfig":"27"},{"size":6355,"mtime":1686668957697,"results":"28","hashOfConfig":"27"},{"size":375,"mtime":1686668957713,"results":"29","hashOfConfig":"27"},{"size":110,"mtime":1686668957713,"results":"30","hashOfConfig":"27"},{"size":9269,"mtime":1686668957713,"results":"31","hashOfConfig":"27"},{"size":3797,"mtime":1686668957713,"results":"32","hashOfConfig":"27"},{"size":996,"mtime":1686668957713,"results":"33","hashOfConfig":"27"},{"size":443,"mtime":1686668957713,"results":"34","hashOfConfig":"27"},{"size":2590,"mtime":1686668957713,"results":"35","hashOfConfig":"27"},{"size":4106,"mtime":1686668957697,"results":"36","hashOfConfig":"27"},{"size":1375,"mtime":1686668957713,"results":"37","hashOfConfig":"27"},{"size":2013,"mtime":1686668957713,"results":"38","hashOfConfig":"27"},{"size":3997,"mtime":1686668957713,"results":"39","hashOfConfig":"27"},{"size":1464,"mtime":1686668957713,"results":"40","hashOfConfig":"27"},{"size":5069,"mtime":1686668957697,"results":"41","hashOfConfig":"27"},{"size":5172,"mtime":1686668957697,"results":"42","hashOfConfig":"27"},{"size":5163,"mtime":1686668957697,"results":"43","hashOfConfig":"27"},{"size":7449,"mtime":1686668957713,"results":"44","hashOfConfig":"27"},{"size":3061,"mtime":1686668957697,"results":"45","hashOfConfig":"27"},{"size":3069,"mtime":1686668957697,"results":"46","hashOfConfig":"27"},{"size":7485,"mtime":1686668957728,"results":"47","hashOfConfig":"27"},{"size":2290,"mtime":1686668957728,"results":"48","hashOfConfig":"27"},{"size":2443,"mtime":1686668957728,"results":"49","hashOfConfig":"27"},{"size":384209,"mtime":1686668957697,"results":"50","hashOfConfig":"27"},{"size":21015,"mtime":1686668957697,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1oib70w",{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Dell\\Desktop\\project\\backend_admission\\priority-analyser-frontend\\src\\index.js",[],"C:\\Users\\Dell\\Desktop\\project\\backend_admission\\priority-analyser-frontend\\src\\App.js",[],"C:\\Users\\Dell\\Desktop\\project\\backend_admission\\priority-analyser-frontend\\src\\reportWebVitals.js",[],"C:\\Users\\Dell\\Desktop\\project\\backend_admission\\priority-analyser-frontend\\src\\lib\\api.js",[],"C:\\Users\\Dell\\Desktop\\project\\backend_admission\\priority-analyser-frontend\\src\\components\\Layout.js",["113"],"import React from \"react\";\r\nimport { Link, NavLink } from \"react-router-dom\";\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport Hidden from \"@material-ui/core/Hidden\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nimport MobileSvg from \"../static//IOE_Rankmobile.svg\";\r\nimport LogoSvg from \"../static/ali_thulo_gap_vako.svg\";\r\n\r\nimport Dropdown from \"./Dropdown\";\r\nimport BottomNav from \"./BottomNav\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  drawer: {\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: drawerWidth,\r\n      flexShrink: 0,\r\n    },\r\n  },\r\n  mobAppBar: {\r\n    backgroundColor: theme.palette.primary.main,\r\n    textAlign: \"center\",\r\n    minHeight: 30,\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      // width: `calc(100% - ${drawerWidth}px)`,\r\n      // marginLeft: drawerWidth,\r\n    },\r\n    // height: \"5rem\",\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      display: \"none\",\r\n    },\r\n  },\r\n  // necessary for content to be below app bar\r\n  toolbar: theme.mixins.toolbar,\r\n\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    margin: theme.spacing(3),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n    margin: \"0.2rem 0.5rem\",\r\n  },\r\n  subtitle: {\r\n    margin: \"2rem 2rem 0.5rem\",\r\n    borderBottom: \"1px solid\",\r\n    borderBottomColor: theme.palette.grey[500],\r\n    fontSize: \"1.1rem\",\r\n  },\r\n  navLink: {\r\n    textDecoration: \"none\",\r\n    color: theme.palette.grey[100],\r\n    padding: \"0.5rem\",\r\n    margin: \"0rem 0.4rem\",\r\n    borderRadius: \"2px\",\r\n    \"&:hover\": {\r\n      transitionDelay: \"0.1s\",\r\n      textDecoration: \"none\",\r\n      color: theme.palette.grey[100],\r\n      backgroundColor: theme.palette.primary.light,\r\n    },\r\n  },\r\n  activeLink: {\r\n    transitionDelay: \"0.1s\",\r\n    color: theme.palette.grey[100],\r\n    // backgroundColor: theme.palette.primary.light,\r\n    borderBottom: \"2px solid\",\r\n    borderBottomColor: theme.palette.secondary.light,\r\n  },\r\n  textfield: {\r\n    margin: \"0.8rem 2.2rem 0.8rem 1.8rem\",\r\n\r\n  }\r\n}));\r\n\r\nfunction ResponsiveDrawer(props) {\r\n  const { window, location } = props;\r\n  const classes = useStyles();\r\n  const [mobileOpen, setMobileOpen] = React.useState(false);\r\n\r\n  const handleDrawerToggle = () => {\r\n    setMobileOpen(!mobileOpen);\r\n  };\r\n\r\n  const drawer = (\r\n    <div>\r\n      <div className={classes.mobAppBar}>\r\n        <img width=\"150\" height=\"50\" src={LogoSvg} alt=\"logo\"></img>\r\n      </div>\r\n\r\n      <Typography variant=\"button\" component=\"h3\" className={classes.subtitle}>\r\n        Filters\r\n      </Typography>\r\n\r\n      {props.collegeList && (\r\n        <Dropdown\r\n          type={\"College\"}\r\n          options={props.collegeList.map((item) => item.code)}\r\n          selected={props.selectedCollege}\r\n          handleSelect={props.setSelectedCollege}\r\n        />\r\n      )}\r\n      {props.currentPage !== \"priority\" && props.facultyList && (\r\n        <Dropdown\r\n          type={\"Faculty\"}\r\n          options={props.facultyList.map((item) => item.code)}\r\n          selected={props.selectedFaculty}\r\n          handleSelect={props.setSelectedFaculty}\r\n        />\r\n      )}\r\n      {props.currentPage === \"priority\" && (\r\n        <TextField\r\n          className={classes.textfield}\r\n          id=\"min-rank\"\r\n          label=\"Minimum Rank\"\r\n          type=\"number\"\r\n          value={props.minRank}\r\n          onChange={(event) => {\r\n            props.onMinRankChange(event.target.value);\r\n          }}\r\n          InputLabelProps={{\r\n            shrink: true,\r\n          }}\r\n          // variant=\"outlined\"\r\n        />\r\n      )}\r\n      {props.currentPage === \"priority\" && (\r\n        <TextField\r\n          className={classes.textfield}\r\n          id=\"max-rank\"\r\n          label=\"Maximum Rank\"\r\n          type=\"number\"\r\n          value={props.maxRank}\r\n          onChange={(event) => {\r\n            props.onMaxRankChange(event.target.value);\r\n          }}\r\n          InputLabelProps={{\r\n            shrink: true,\r\n          }}\r\n          // variant=\"outlined\"\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n\r\n  const container =\r\n    window !== undefined ? () => window().document.body : undefined;\r\n\r\n  return (\r\n    <div>\r\n      <div className={classes.root}>\r\n        {/* appbar starts here */}\r\n        <AppBar position=\"fixed\" className={classes.appBar}>\r\n          <Toolbar>\r\n            <IconButton\r\n              color=\"inherit\"\r\n              aria-label=\"open drawer\"\r\n              edge=\"start\"\r\n              onClick={handleDrawerToggle}\r\n              className={classes.menuButton}\r\n            >\r\n              <MenuIcon />\r\n            </IconButton>\r\n            <Hidden xsDown>\r\n              <Link to=\"/\" className={classes.title}>\r\n                <img\r\n                  onClick={() => props.setShowResult(false)}\r\n                  style={{ margin: \"0 auto\" }}\r\n                  width=\"150\"\r\n                  height=\"50\"\r\n                  src={LogoSvg}\r\n                  alt=\"logo\"\r\n                ></img>\r\n              </Link>\r\n            </Hidden>\r\n            <Hidden smUp implementation=\"css\" className={classes.title}>\r\n              <img\r\n                style={{ margin: \"0 auto\" }}\r\n                width=\"100\"\r\n                height=\"30\"\r\n                src={MobileSvg}\r\n                alt=\"logo\"\r\n              ></img>\r\n            </Hidden>\r\n\r\n            <Switch\r\n              checked={props.darkState}\r\n              onChange={props.handleThemeChange}\r\n            />\r\n            <Hidden xsDown implementation=\"css\">\r\n              <NavLink\r\n                className={classes.navLink}\r\n                activeClassName={classes.activeLink}\r\n                to=\"/predict\"\r\n              >\r\n                <Typography variant=\"button\">Prediction</Typography>\r\n              </NavLink>\r\n              <NavLink\r\n                className={classes.navLink}\r\n                activeClassName={classes.activeLink}\r\n                to=\"/analyse\"\r\n              >\r\n                <Typography variant=\"button\">Cutoff Analysis</Typography>\r\n              </NavLink>\r\n              <NavLink\r\n                className={classes.navLink}\r\n                activeClassName={classes.activeLink}\r\n                to=\"/priority\"\r\n              >\r\n                <Typography variant=\"button\">Rank Analysis</Typography>\r\n              </NavLink>\r\n\r\n              <NavLink\r\n                className={classes.navLink}\r\n                activeClassName={classes.activeLink}\r\n                to=\"/location\"\r\n              >\r\n                <Typography variant=\"button\">Location</Typography>\r\n              </NavLink>\r\n\r\n              \r\n              <NavLink\r\n                className={classes.navLink}\r\n                activeClassName={classes.activeLink}\r\n                to=\"/faq\"\r\n              >\r\n                <Typography variant=\"button\">FAQ</Typography>\r\n              </NavLink>\r\n            </Hidden>\r\n          </Toolbar>\r\n        </AppBar>\r\n        {/* appbar ends here */}\r\n\r\n        {/* drawer starts here */}\r\n\r\n        {props.currentPage !== 'faq' && <nav className={classes.drawer}>\r\n          <Hidden smUp implementation=\"css\">\r\n            <Drawer\r\n              container={container}\r\n              variant=\"temporary\"\r\n              anchor=\"left\"\r\n              open={mobileOpen}\r\n              onClose={handleDrawerToggle}\r\n              classes={{\r\n                paper: classes.drawerPaper,\r\n              }}\r\n              ModalProps={{\r\n                keepMounted: true, // Better open performance on mobile.\r\n              }}\r\n            >\r\n              {drawer}\r\n            </Drawer>\r\n          </Hidden>\r\n          <Hidden xsDown implementation=\"css\">\r\n            <Drawer\r\n              classes={{\r\n                paper: classes.drawerPaper,\r\n              }}\r\n              variant=\"permanent\"\r\n              open\r\n            >\r\n              {drawer}\r\n            </Drawer>\r\n          </Hidden>\r\n        </nav>}\r\n        {/* drawer ends here  */}\r\n\r\n        {/* main body starts here */}\r\n        <main className={classes.content}>\r\n          <div className={classes.toolbar}></div>\r\n          {props.children}\r\n        </main>\r\n        {/* main body ends here */}\r\n      </div>\r\n\r\n      {/* bottom navigation for mobile starts here */}\r\n      <Hidden smUp implementation=\"css\">\r\n        <div style={{ position: \"fixed\", bottom: \"0\", width: \"100%\" }}>\r\n          <BottomNav />\r\n        </div>\r\n      </Hidden>\r\n      {/* bottom navigation for mobile ends here */}\r\n    </div>\r\n  );\r\n}\r\n\r\nResponsiveDrawer.propTypes = {\r\n  /**\r\n   * Injected by the documentation to work in an iframe.\r\n   * You won't need it on your project.\r\n   */\r\n  window: PropTypes.func,\r\n};\r\n\r\nexport default ResponsiveDrawer;\r\n","C:\\Users\\Dell\\Desktop\\project\\backend_admission\\priority-analyser-frontend\\src\\prediction\\index.js",["114"],"import React, { useEffect } from \"react\";\r\nimport { Typography, Button, Hidden } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Barsvg from \"../static/1final.svg\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Container from \"@material-ui/core/Container\";\r\n\r\nimport Search from \"../components/search\";\r\nimport MyChart from \"../visualizations/BarChart\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    margin: \"0.8rem 0\",\r\n  },\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(1, 0, 0, 0),\r\n    textAlign: \"center\",\r\n  },\r\n  image: {\r\n    padding: theme.spacing(1, 0, 0, 0),\r\n    textAlign: \"center\",\r\n    [theme.breakpoints.down(\"md\")]: {\r\n      width: \"60%\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst PredictionPage = ({\r\n  selectedCollege,\r\n  selectedFaculty,\r\n  rank,\r\n  setRank,\r\n  setShowResult,\r\n  showResult,\r\n  setIsAnalysisPage,\r\n  setCurrentPage,\r\n}) => {\r\n  setIsAnalysisPage(false);\r\n  useEffect(() => {\r\n    setCurrentPage(\"predict\");\r\n  }, []);\r\n\r\n  // const [showResult, setShowResult] = useState(false);\r\n  const classes = useStyles();\r\n\r\n  const onClickPredict = () => {\r\n    if (rank > 0) {\r\n      setShowResult(true);\r\n    }\r\n  };\r\n  return showResult ? (\r\n    <div>\r\n      <Hidden smUp implementation=\"css\">\r\n        <div style={{ textAlign: \"center\" }}>\r\n          <Search\r\n            onPressEnter={onClickPredict}\r\n            rank={rank}\r\n            onRankChange={(data) => {\r\n              setRank(data);\r\n            }}\r\n          />\r\n          <div>\r\n            <MyChart\r\n              selectedCollege={selectedCollege}\r\n              selectedFaculty={selectedFaculty}\r\n              rank={rank}\r\n            />\r\n          </div>\r\n        </div>\r\n      </Hidden>\r\n      <Hidden xsDown implementation=\"css\">\r\n        <div style={{ display: \"flex\" }}>\r\n          <div style={{ width: \"70%\" }}>\r\n            <MyChart\r\n              selectedCollege={selectedCollege}\r\n              selectedFaculty={selectedFaculty}\r\n              rank={rank}\r\n            />\r\n          </div>\r\n          <div style={{}}>\r\n            <Search\r\n              onPressEnter={onClickPredict}\r\n              rank={rank}\r\n              onRankChange={(data) => {\r\n                setRank(data);\r\n              }}\r\n            />\r\n            {/* <Button color=\"primary\">Reset</Button> */}\r\n          </div>\r\n        </div>\r\n      </Hidden>\r\n    </div>\r\n  ) : (\r\n    <div className={classes.root}>\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12}>\r\n          <div className={classes.paper}>\r\n            <img\r\n              className={classes.image}\r\n              width=\"20%\"\r\n              src={Barsvg}\r\n              alt=\"bar chart svg\"\r\n            ></img>\r\n          </div>\r\n          <div className={classes.paper}>\r\n            <Typography variant=\"h4\">IOE Rank Predictor</Typography>\r\n            <Container maxWidth=\"sm\">\r\n              <Typography variant=\"caption\">\r\n                BE Aspirants are required to enter their obtained/expected rank\r\n                below. The prediction is based on the cutoff rank of IOE\r\n                admission list of year 2077.\r\n              </Typography>\r\n            </Container>\r\n            <Search\r\n              onPressEnter={onClickPredict}\r\n              rank={rank}\r\n              onRankChange={(data) => {\r\n                setRank(data);\r\n              }}\r\n            />\r\n            <Button\r\n              className={classes.button}\r\n              onClick={onClickPredict}\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              disabled={rank <= 0}\r\n            >\r\n              Predict\r\n            </Button>\r\n          </div>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\nexport default PredictionPage;\r\n","C:\\Users\\Dell\\Desktop\\project\\backend_admission\\priority-analyser-frontend\\src\\analysis\\index.js",["115"],"import OneCollegeOneFac from \"./OneCollegeOneFac\";\r\nimport AllCollegeOneFac from \"./AllCollegeOneFac\";\r\nimport OneCollegeAllFac from \"./OneCollegeAllFac\";\r\nimport { useEffect } from \"react\";\r\n\r\nconst AnalysisPage = ({\r\n  selectedCollege,\r\n  selectedFaculty,\r\n  setIsAnalysisPage,\r\n  setCurrentPage,\r\n}) => {\r\n  // setCurrentPage(\"analyse\");\r\n  useEffect(() => {\r\n    setCurrentPage(\"analyse\");\r\n  }, []);\r\n\r\n  setIsAnalysisPage(true);\r\n\r\n  return (\r\n    <div>\r\n      {selectedCollege === \"All\" && selectedFaculty !== \"All\" && (\r\n        <AllCollegeOneFac facultyName={selectedFaculty} />\r\n      )}\r\n      {selectedCollege !== \"All\" && selectedFaculty === \"All\" && (\r\n        <OneCollegeAllFac collegeName={selectedCollege} />\r\n      )}\r\n      {selectedCollege !== \"All\" && selectedFaculty !== \"All\" && (\r\n        <OneCollegeOneFac\r\n          selectedFaculty={selectedFaculty}\r\n          selectedCollege={selectedCollege}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default AnalysisPage;\r\n","C:\\Users\\Dell\\Desktop\\project\\backend_admission\\priority-analyser-frontend\\src\\new\\index.js",["116"],"import Chart from \"./chart\";\r\nimport { useEffect } from \"react\";\r\n\r\nconst RangeFilter = ({ setCurrentPage, minRank, maxRank, selectedCollege }) => {\r\n  // setCurrentPage(\"new\");\r\n  useEffect(() => {\r\n    setCurrentPage(\"priority\");\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <Chart\r\n        minRank={minRank}\r\n        maxRank={maxRank}\r\n        selectedCollege={selectedCollege}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RangeFilter;\r\n","C:\\Users\\Dell\\Desktop\\project\\backend_admission\\priority-analyser-frontend\\src\\faq\\index.js",["117","118"],"import React from \"react\";\r\nimport Faq from \"react-faq-component\";\r\nimport { lightBlue, grey } from \"@material-ui/core/colors\";\r\nimport { useTheme } from \"@material-ui/core/styles\";\r\nimport { PredictionTable, BasicTable } from \"./table.js\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Container from \"@material-ui/core/Container\";\r\n\r\nconst data = {\r\n  title: \"FAQ\",\r\n  rows: [\r\n    {\r\n      title: \"How we predict the results?\",\r\n      content: (\r\n        <div>\r\n          <p>\r\n            First, we calculate the cutoff marks of each program, then remove\r\n            the outliers and use the confidence interval to predict the result.\r\n          </p>\r\n          <PredictionTable />\r\n        </div>\r\n      ),\r\n    },\r\n    {\r\n      title: \"How does analysis page works?\",\r\n      content: `It works on the basis of cutoff marks of each program and colleges. Here, we use range based bar graph to show cutoff marks of various programs and colleges.\r\n            We also provide information about the number of seats available in the form of pie chart.`,\r\n    },\r\n    {\r\n      title: \"Does our calulation includes the various quota system of IOE?\",\r\n      content: `No, currently our system doesnot take quota system into consideration. We take them as outliers and do calulation accordingly.`,\r\n    },\r\n    {\r\n      title: \"What are the Full Form of colleges?\",\r\n      content: (\r\n        <div>\r\n          <Typography variant=\"body1\">\r\n            The list of all the colleges of IOE with their code name and full\r\n            form is shown below\r\n          </Typography>\r\n          <BasicTable college={true} />\r\n        </div>\r\n      ),\r\n    },\r\n    {\r\n      title: \"What are the Full Form of programs?\",\r\n      content: (\r\n        <div>\r\n          <Typography variant=\"body1\">\r\n            The list of all the programs of IOE with their code name and full\r\n            form is shown below\r\n          </Typography>\r\n          <BasicTable college={false} />\r\n        </div>\r\n      ),\r\n    },\r\n  ],\r\n};\r\n\r\nconst FAQ = ({ setCurrentPage }) => {\r\n  setCurrentPage(\"faq\");\r\n  const theme = useTheme();\r\n\r\n  const styles = {\r\n    bgColor: theme.palette.background.default,\r\n    titleTextColor: theme.palette.text.primary,\r\n    rowTitleColor: theme.palette.text.primary,\r\n    rowContentColor: theme.palette.text.secondary,\r\n    arrowColor: theme.palette.secondary.main,\r\n  };\r\n  return (\r\n    <div>\r\n      <Container style={{ paddingBottom: \"3rem\" }} maxWidth=\"sm\">\r\n        <Faq data={data} styles={styles} />\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FAQ;\r\n","C:\\Users\\Dell\\Desktop\\project\\backend_admission\\priority-analyser-frontend\\src\\Location\\index.js",["119","120"],"import React from \"react\";\r\nimport api from \"../lib/api\";\r\nimport { useState, useEffect } from \"react\";\r\nimport {\r\n  Grid,\r\n  Typography,\r\n  ThemeProvider,\r\n  createTheme,\r\n  makeStyles,\r\n  Box,\r\n} from \"@material-ui/core\";\r\n\r\n// import { useTheme } from \"@material-ui/core/styles\";\r\n\r\nimport DistrictMap from \"./District\";\r\nimport ZoneMap from \"./Zone\";\r\n\r\nconst useStyles = makeStyles((theme) => {\r\n  return {\r\n    root: {},\r\n    primaryColor: {\r\n      // color: theme.palette.text.primary,\r\n      color: theme.palette.primary.light,\r\n      fontSize: theme.breakpoints.xs,\r\n    },\r\n  };\r\n});\r\n\r\nconst theme = createTheme();\r\ntheme.typography.h4 = {\r\n  fontSize: \"1.2rem\",\r\n  \"@media (min-width:600px)\": {\r\n    fontSize: \"1rem\",\r\n  },\r\n  [theme.breakpoints.up(\"md\")]: {\r\n    fontSize: \"1.8rem\",\r\n  },\r\n};\r\n\r\nconst Location = ({ setCurrentPage, selectedFaculty, selectedCollege }) => {\r\n  useEffect(() => {\r\n    setCurrentPage(\"location\");\r\n  }, []);\r\n  // const theme = useTheme();\r\n  const classes = useStyles();\r\n\r\n  const styles = {\r\n    bgColor: theme.palette.background.default,\r\n    titleTextColor: theme.palette.text.primary,\r\n    rowTitleColor: theme.palette.text.primary,\r\n    rowContentColor: theme.palette.text.secondary,\r\n    arrowColor: theme.palette.secondary.main,\r\n  };\r\n\r\n  const [districtData, setDistrictData] = useState([]);\r\n  const [zoneData, setZoneData] = useState([]);\r\n  const [collegeData, setCollegeData] = useState(\"All Colleges\");\r\n  const [programData, setProgramData] = useState(\"All Programs\");\r\n  const [maxValue, setMaxValue] = useState(1);\r\n\r\n  useEffect(() => {\r\n    const data = new FormData();\r\n    data.set(\"college\", selectedCollege);\r\n    data.set(\"faculty\", selectedFaculty);\r\n\r\n    api.post(\"/district/\", data).then((res) => {\r\n      console.log(res.data);\r\n      setCollegeData(res.data[0][\"college\"]);\r\n      setProgramData(res.data[1][\"program\"]);\r\n      setDistrictData(res.data[2][\"location\"]);\r\n      setMaxValue(res.data[2][\"location\"][0].count);\r\n    });\r\n  }, [selectedCollege, selectedFaculty]);\r\n\r\n  const transformDistrict = (districtData) => {\r\n    // Change array to dictionary\r\n    let districtDict = {};\r\n    districtData.forEach((district) => {\r\n      districtDict[district.district__name.toLowerCase()] = district.count;\r\n    });\r\n    return districtDict;\r\n  };\r\n\r\n  useEffect(() => {\r\n    const data = new FormData();\r\n    data.set(\"college\", selectedCollege);\r\n    data.set(\"faculty\", selectedFaculty);\r\n\r\n    api.post(\"/zone/\", data).then((res) => {\r\n      console.log(res.data);\r\n      // setCollegeData(res.data[0][\"college\"]);\r\n      // setProgramData(res.data[1][\"program\"]);\r\n      setZoneData(res.data);\r\n      setMaxValue(res.data[0].count);\r\n    });\r\n  }, [selectedCollege, selectedFaculty]);\r\n\r\n  const transformZone = (zoneData) => {\r\n    // Change array to dictionary\r\n    let zoneDict = {};\r\n    zoneData.forEach((zone) => {\r\n      zoneDict[zone.district__zone__name.toLowerCase()] = zone.count;\r\n    });\r\n    return zoneDict;\r\n  };\r\n\r\n  return (\r\n    <Box>\r\n      <ThemeProvider theme={theme}>\r\n        <Typography\r\n          style={{ marginBottom: 6 }}\r\n          align=\"center\"\r\n          className={classes.primaryColor}\r\n          variant=\"h4\"\r\n        >\r\n          {collegeData}\r\n        </Typography>\r\n        <Typography\r\n          align=\"center\"\r\n          className={classes.primaryColor}\r\n          variant=\"h5\"\r\n        >\r\n          {programData}\r\n        </Typography>\r\n      </ThemeProvider>\r\n      <Grid style={{ maxWidth: \"80%\", margin: \"auto\" }}>\r\n        <DistrictMap\r\n          hoverColor=\"red\"\r\n          stroke=\"#000\"\r\n          strokeWidth={1}\r\n          // onMapClick={(val) => console.log(val)}\r\n          districtData={transformDistrict(districtData)}\r\n          maxValue={maxValue}\r\n        />\r\n\r\n        <ZoneMap\r\n          hoverColor=\"red\"\r\n          stroke=\"#000\"\r\n          strokeWidth={1}\r\n          // onMapClick={(val) => console.log(val)}\r\n          zoneData={transformZone(zoneData)}\r\n          maxValue={maxValue}\r\n        />\r\n      </Grid>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Location;\r\n","C:\\Users\\Dell\\Desktop\\project\\backend_admission\\priority-analyser-frontend\\src\\components\\Dropdown.js",[],"C:\\Users\\Dell\\Desktop\\project\\backend_admission\\priority-analyser-frontend\\src\\components\\BottomNav.js",[],"C:\\Users\\Dell\\Desktop\\project\\backend_admission\\priority-analyser-frontend\\src\\faq\\table.js",["121","122"],"import React, { useEffect, useState }  from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { Grid } from \"@material-ui/core\";\r\nimport api from \"../lib/api.js\"\r\n\r\n\r\nfunction createPredictionData(calculation, score, remarks) {\r\n  return { calculation, score, remarks };\r\n}\r\n\r\nconst prows = [\r\n  createPredictionData('rank < cut_off -  40% of total_seat', 5, 'very high chance'),\r\n  createPredictionData('rank < cut_off -  10% of total_seat', 4, 'high chance'),\r\n  createPredictionData('rank < cut_off +- 10% of total_seat', 3, 'Critical'),\r\n  createPredictionData('rank < cut_off +  30% of total_seat', 2, 'low'),\r\n  createPredictionData('ELSE', 1, 'very low'),\r\n];\r\n\r\nexport function PredictionTable() {\r\n  return (\r\n    <Grid style={{ margin: \"0 auto\" }} item xs={10} md={12}>\r\n      <TableContainer component={Paper}>\r\n        <Table aria-label=\"simple table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>Calculation</TableCell>\r\n              <TableCell align=\"right\">Score</TableCell>\r\n              <TableCell align=\"right\">Remarks</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {prows.map((row) => (\r\n              <TableRow key={row.calculation}>\r\n                <TableCell component=\"th\" scope=\"row\">\r\n                  {row.calculation}\r\n                </TableCell>\r\n                <TableCell align=\"right\">{row.score}</TableCell>\r\n                <TableCell align=\"right\">{row.remarks}</TableCell>\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </Grid>\r\n  );\r\n}\r\n\r\n\r\nfunction createCollegeData(calculation, score, remarks) {\r\n  return { calculation, score, remarks };\r\n}\r\n\r\nconst rows = [\r\n  createCollegeData('rank < cut_off -  40% of total_seat', 5, 'very high chance'),\r\n  createCollegeData('rank < cut_off -  10% of total_seat', 4, 'high chance'),\r\n  createCollegeData('rank < cut_off +- 10% of total_seat', 3, 'Critical'),\r\n  createCollegeData('rank < cut_off +  30% of total_seat', 2, 'low'),\r\n  createCollegeData('ELSE', 1, 'very low'),\r\n];\r\n\r\nexport function BasicTable({college}) {\r\n  const [collegeList, setCollegeList] = useState([]);\r\n  const [facultyList, setFacultyList] = useState([]);\r\n  useEffect(() => {\r\n    api.get(\"/colleges/\").then(({ data }) => {\r\n      setCollegeList(data);\r\n    });\r\n  }, []);\r\n  useEffect(() => {\r\n    api.get(\"/programs/\").then(({ data }) => {\r\n      setFacultyList(data);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <Grid style={{ margin: \"0 auto\" }} item xs={10} md={12}>\r\n      <TableContainer component={Paper}>\r\n        <Table aria-label=\"simple table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>Code</TableCell>\r\n              <TableCell align=\"left\">Name</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {college && collegeList.map((row) => (\r\n              <TableRow key={row.code}>\r\n                <TableCell component=\"th\" scope=\"row\">\r\n                  {row.code}\r\n                </TableCell>\r\n                <TableCell align=\"left\">{row.name}</TableCell>\r\n              </TableRow>\r\n            ))}\r\n            {!college && facultyList.map((row) => (\r\n              <TableRow key={row.code}>\r\n                <TableCell component=\"th\" scope=\"row\">\r\n                  {row.code}\r\n                </TableCell>\r\n                <TableCell align=\"left\">{row.name}</TableCell>\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </Grid>\r\n  );\r\n}\r\n","C:\\Users\\Dell\\Desktop\\project\\backend_admission\\priority-analyser-frontend\\src\\components\\search.js",[],"C:\\Users\\Dell\\Desktop\\project\\backend_admission\\priority-analyser-frontend\\src\\analysis\\AllCollegeOneFac.js",[],"C:\\Users\\Dell\\Desktop\\project\\backend_admission\\priority-analyser-frontend\\src\\analysis\\OneCollegeOneFac.js",["123"],"import React, { useEffect, useState } from \"react\";\r\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport api from \"../lib/api\";\r\nimport {\r\n  Grid,\r\n  Typography,\r\n  ThemeProvider,\r\n  createTheme,\r\n} from \"@material-ui/core\";\r\nimport SeatPieChart from \"../visualizations/PieChart\";\r\nconst useStyles = makeStyles((theme) => {\r\n  return {\r\n    root: {},\r\n    primaryColor: {\r\n      // color: theme.palette.text.primary,\r\n      color: theme.palette.primary.light,\r\n      fontSize: theme.breakpoints.xs,\r\n    },\r\n  };\r\n});\r\n\r\n// const\r\n\r\nconst keyMapping = {\r\n  cutoff: \"Highest Rank\",\r\n  cutin: \" Lowest Rank\",\r\n  cutoffMarks: \"Least Marks\",\r\n  seats: \"Seats\",\r\n};\r\n\r\nconst theme = createTheme();\r\n\r\ntheme.typography.h4 = {\r\n  fontSize: \"1.2rem\",\r\n  \"@media (min-width:600px)\": {\r\n    fontSize: \"1rem\",\r\n  },\r\n  [theme.breakpoints.up(\"md\")]: {\r\n    fontSize: \"1.8rem\",\r\n  },\r\n};\r\n\r\nconst transform = (data) => {\r\n  let result = [];\r\n  result.push({ type: \"Regular\", seats: data[1][\"seats\"], fill: \"#441DCE\" });\r\n  if (data.length === 2) {\r\n    result.push({ type: \"Full Fee\", seats: data[0][\"seats\"], fill: \"#7859E7\" });\r\n  }\r\n  return result;\r\n};\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: \"#3f51b5\",\r\n    color: theme.palette.common.white,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n  root: {\r\n    \"&:nth-of-type(odd)\": {\r\n      backgroundColor: theme.palette.action.hover,\r\n    },\r\n  },\r\n}))(TableRow);\r\n\r\nexport default function CustomizedTables({ selectedCollege, selectedFaculty }) {\r\n  /* known bug: this page has horizonatl scroll we need to stop that */\r\n  const classes = useStyles();\r\n  const [regularData, setRegularData] = useState();\r\n  const [payingData, setPayingData] = useState();\r\n  const [pieChartData, setPieChartData] = useState();\r\n  const [hasRegular, setHasRegular] = useState(false);\r\n\r\n  useEffect(() => {\r\n    api\r\n      .get(\r\n        `/collegeprograms/?college=${selectedCollege}&program=${selectedFaculty}`\r\n      )\r\n      .then(({ data }) => {\r\n        setPayingData(data[0]);\r\n\r\n        if (data.length === 2) {\r\n          setRegularData(data[1]);\r\n          setPieChartData(transform(data));\r\n          setHasRegular(true);\r\n        } else {\r\n          setRegularData(\"\");\r\n          setHasRegular(false);\r\n        }\r\n      });\r\n  }, [selectedFaculty, selectedCollege]);\r\n\r\n  return (\r\n    <Grid spacing={5} justify=\"center\" container>\r\n      <Grid item xs={9}>\r\n        <ThemeProvider theme={theme}>\r\n          <Typography\r\n            align=\"center\"\r\n            className={classes.primaryColor}\r\n            variant=\"h4\"\r\n          >\r\n            {payingData ? payingData.college : \"\"}\r\n          </Typography>\r\n          <Typography\r\n            align=\"center\"\r\n            className={classes.primaryColor}\r\n            variant=\"h5\"\r\n          >\r\n            {payingData ? payingData.program : \"\"}\r\n          </Typography>\r\n        </ThemeProvider>\r\n      </Grid>\r\n\r\n      <Grid style={{ margin: \"0 auto\" }} item xs={10} md={4}>\r\n        <TableContainer component={Paper}>\r\n          <Table className={classes.table} aria-label=\"simple table\">\r\n            <TableHead>\r\n              <TableRow>\r\n                <StyledTableCell>Properties</StyledTableCell>\r\n                {hasRegular && <StyledTableCell>Regular</StyledTableCell>}\r\n                <StyledTableCell>Paying</StyledTableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            {payingData && (\r\n              <TableBody>\r\n                {/* we always have paying data but regular data chai gov college ko lagi matra hunxa so mapping through payingData */}\r\n                {Object.keys(payingData).map((key) => {\r\n                  if (\r\n                    key !== \"college\" &&\r\n                    key !== \"program\" &&\r\n                    key !== \"cutinMarks\" &&\r\n                    key !== \"type\"\r\n                  ) {\r\n                    return (\r\n                      <StyledTableRow key={key}>\r\n                        <TableCell component=\"th\" scope=\"row\">\r\n                          {keyMapping[key]}\r\n                        </TableCell>\r\n                        {hasRegular && (\r\n                          <TableCell>{regularData[key]}</TableCell>\r\n                        )}\r\n                        <TableCell>{payingData[key]}</TableCell>\r\n                      </StyledTableRow>\r\n                    );\r\n                  }\r\n                })}\r\n              </TableBody>\r\n            )}\r\n          </Table>\r\n        </TableContainer>\r\n      </Grid>\r\n      <Grid item xs={10} md={7}>\r\n        {hasRegular && (\r\n          <SeatPieChart currentFrame={pieChartData} yaxis_data=\"type\" />\r\n        )}\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","C:\\Users\\Dell\\Desktop\\project\\backend_admission\\priority-analyser-frontend\\src\\analysis\\OneCollegeAllFac.js",[],"C:\\Users\\Dell\\Desktop\\project\\backend_admission\\priority-analyser-frontend\\src\\new\\chart.js",["124","125","126"],"import React, { useEffect, useState } from \"react\";\r\nimport api from \"../lib/api\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport {\r\n  BarChart,\r\n  Bar,\r\n  XAxis,\r\n  YAxis,\r\n  Tooltip,\r\n  ResponsiveContainer,\r\n} from \"recharts\";\r\nimport { Grid, Typography, createTheme } from \"@material-ui/core\";\r\nimport { makeStyles, ThemeProvider } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => {\r\n  return {\r\n    root: {},\r\n    primaryColor: {\r\n      color: theme.palette.primary.light,\r\n      fontSize: theme.breakpoints.xs,\r\n    },\r\n  };\r\n});\r\n\r\nconst CustomizedTooltip = ({ active, payload, label }) => {\r\n  //   console.log(payload);\r\n  if (active && payload && payload.length) {\r\n    return (\r\n      <div\r\n        style={{\r\n          margin: 0,\r\n          padding: 10,\r\n          backgroundColor: \"#fff\",\r\n          border: \"1px solid #ccc\",\r\n          whiteSpace: \"nowrap\",\r\n        }}\r\n      >\r\n        <p>\r\n          Admitted Students : {payload[0].payload[\"count\"]}{\" \"}\r\n          {/* {payload[0].payload[\"collegeprogram__program__name\"]} */}\r\n          {/* {payload[0].payload[\"type\"] === \"R\" ? \"Regular\" : \"Full Fee\"} */}\r\n        </p>\r\n        <p>{payload[0].payload[\"college_name\"]}</p>\r\n\r\n        <p>{payload[0].payload[\"program_name\"]}</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return null;\r\n};\r\nconst colors = [\r\n  \"#0d47a1\",\r\n  \"#1565c0\",\r\n  \"#1976d2\",\r\n  \"#1e88e5\",\r\n  \"#2196f3\",\r\n  \"#42a5f5\",\r\n  \"#64b5f6\",\r\n  \"#90caf9\",\r\n];\r\nconst theme = createTheme();\r\n\r\ntheme.typography.h4 = {\r\n  fontSize: \"1.2rem\",\r\n  \"@media (min-width:600px)\": {\r\n    fontSize: \"1rem\",\r\n  },\r\n  [theme.breakpoints.up(\"md\")]: {\r\n    fontSize: \"1.8rem\",\r\n  },\r\n};\r\nconst MyBarChart = ({ selectedCollege, minRank, maxRank }) => {\r\n  const classes = useStyles();\r\n  /* transform data to the form that is easy to display in graph */\r\n  const transformData = (data) => {\r\n    // console.log(\"inside transformData\", data);\r\n\r\n    return (\r\n      data\r\n        .map((data, i) => {\r\n          const label =\r\n            selectedCollege === \"All\"\r\n              ? \"collegeprogram__college\"\r\n              : \"collegeprogram__program\";\r\n          return {\r\n            label: `${data[label]}`,\r\n            college_name: data[\"collegeprogram__college__name\"],\r\n            count: data[\"count\"],\r\n            program_name: data[\"collegeprogram__program__name\"],\r\n            fill: \"#2196f3\",\r\n          };\r\n        })\r\n        // .sort((a, b) => a.program_name - b.program_name)\r\n        .sort((a, b) => Number(b.count) - Number(a.count))\r\n    );\r\n  };\r\n\r\n  const noOfDataPerFrame = 8;\r\n  let [data, setData] = useState([]);\r\n  /* data is shown \"noOfDataFrame\"(eg.10) at a time so this variable helps to determine which frame is that,\r\n  for example initionally it is zero and if i press next then data that needs to be\r\n  displayed are data no 10 to data no 20 */\r\n  const [dataFrameNo, setDataFrameNo] = useState(0);\r\n  let [currentFrame, setCurrentFrame] = useState([]);\r\n\r\n  const fetchData = () => {\r\n    /* should make a request to api includeing college selected,min-rank and max-rank */\r\n    if (\r\n      Number(maxRank) < Number(minRank) ||\r\n      Number(minRank) < 1 ||\r\n      Number(maxRank) < 1\r\n    ) {\r\n      console.log(\"not valid\");\r\n      return;\r\n    }\r\n    let form = new FormData();\r\n    form.append(\"min_rank\", minRank);\r\n    form.append(\"max_rank\", maxRank);\r\n    form.append(\"college\", selectedCollege);\r\n\r\n    api.post(\"/rank/\", form).then((res) => {\r\n      console.log(\"res data\", res.data);\r\n      setData(transformData(res.data));\r\n      setDataFrameNo(0);\r\n    });\r\n  };\r\n  useEffect(fetchData, [minRank, maxRank, selectedCollege]);\r\n\r\n  useEffect(() => {\r\n    setCurrentFrame(\r\n      data.slice(\r\n        0,\r\n        noOfDataPerFrame > data.length ? data.length : noOfDataPerFrame\r\n      )\r\n    );\r\n  }, [data]);\r\n\r\n  if (data.length == 0)\r\n    return (\r\n      <div>\r\n        <h3>No students in this range!</h3>\r\n      </div>\r\n    );\r\n  return (\r\n    currentFrame.length > 0 && (\r\n      <div>\r\n        <Grid justify=\"center\" container>\r\n          <Grid item xs={9}>\r\n            <ThemeProvider theme={theme}>\r\n              <Typography\r\n                align=\"center\"\r\n                className={classes.primaryColor}\r\n                variant=\"h4\"\r\n              >\r\n                {selectedCollege === \"All\"\r\n                  ? \"All Colleges\"\r\n                  : currentFrame[0][\"college_name\"]}\r\n              </Typography>\r\n            </ThemeProvider>\r\n          </Grid>\r\n          <Grid item xs={12} sm={10}>\r\n            <ResponsiveContainer width=\"100%\" height={400}>\r\n              {/* <h1>for rank =123</h1> */}\r\n              <BarChart\r\n                layout=\"vertical\"\r\n                data={currentFrame}\r\n                margin={{\r\n                  top: 5,\r\n                  right: 30,\r\n                  left: 20,\r\n                  bottom: 5,\r\n                }}\r\n              >\r\n                <XAxis\r\n                  domain={[0, 200]}\r\n                  height={50}\r\n                  tickCount={10}\r\n                  type=\"number\"\r\n                />\r\n                <YAxis\r\n                  type=\"category\"\r\n                  dataKey={\"label\"}\r\n                  axisLine={false}\r\n                  tickLine={false}\r\n                  padding={{ right: 10 }}\r\n                  width={100}\r\n                  // orientation=\"right\"\r\n                />\r\n                <Tooltip\r\n                  // cursor={{ stroke: \"#A0A0A0\", strokeWidth: 1, fill: \"#eeeeee\" }}\r\n                  content={<CustomizedTooltip />}\r\n                />\r\n\r\n                <Bar radius={[10, 10, 10, 10]} barSize={15} dataKey=\"count\" />\r\n              </BarChart>\r\n            </ResponsiveContainer>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <div\r\n          style={{\r\n            padding: \"0 3rem\",\r\n            marginBottom: \"2rem\",\r\n            marginTop: \"2rem\",\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n          }}\r\n        >\r\n          <Button\r\n            style={{ marginRight: \"2rem\" }}\r\n            disabled={dataFrameNo <= 0}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={() => {\r\n              if (dataFrameNo > 0) {\r\n                let a = dataFrameNo - 1;\r\n                let b = a * noOfDataPerFrame + noOfDataPerFrame;\r\n\r\n                setCurrentFrame(\r\n                  data.slice(\r\n                    a * noOfDataPerFrame,\r\n                    b > data.length ? data.length : b\r\n                  )\r\n                );\r\n                setDataFrameNo(a);\r\n              }\r\n            }}\r\n          >\r\n            Previous\r\n          </Button>\r\n          <Button\r\n            disabled={(dataFrameNo + 1) * noOfDataPerFrame >= data.length}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={() => {\r\n              if ((dataFrameNo + 1) * noOfDataPerFrame <= data.length) {\r\n                let a = dataFrameNo + 1;\r\n                let b = a * noOfDataPerFrame + noOfDataPerFrame;\r\n                setCurrentFrame(\r\n                  data.slice(\r\n                    a * noOfDataPerFrame,\r\n                    b > data.length ? data.length : b\r\n                  )\r\n                );\r\n                setDataFrameNo(a);\r\n              }\r\n            }}\r\n          >\r\n            Next\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    )\r\n  );\r\n};\r\n\r\nexport default MyBarChart;\r\n","C:\\Users\\Dell\\Desktop\\project\\backend_admission\\priority-analyser-frontend\\src\\Location\\Zone.js",["127","128","129","130"],"import React from \"react\";\r\nimport zoneMapData from \"./metadata/zoneMapData\";\r\nimport red from \"@material-ui/core/colors/red\";\r\n\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nconst defaultColor = \"green\";\r\nconst pathColor = \"#f0ece1\";\r\nconst getRandomColor = () => {\r\n  return \"#f0ece1\";\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  tooltip: {\r\n    backgroundColor: theme.palette.common.white,\r\n    color: \"rgba(0, 0, 0, 0.87)\",\r\n    boxShadow: theme.shadows[1],\r\n    fontSize: \"inherit\",\r\n    borderRadius: \"5px\",\r\n  },\r\n}));\r\n\r\nexport default function ZoneMap({\r\n  onMapClick,\r\n  sectorClassName,\r\n  containerClassName,\r\n\r\n  stroke,\r\n  strokeWidth,\r\n  zoneData,\r\n  maxValue,\r\n}) {\r\n  const handleMapClick = (item) => {\r\n    if (onMapClick) {\r\n      onMapClick({\r\n        name: item.name,\r\n        code: item.code,\r\n      });\r\n    }\r\n  };\r\n\r\n  function camelize(string) {\r\n    return string.charAt(0).toUpperCase() + string.slice(1);\r\n  }\r\n\r\n  const classes = useStyles();\r\n  // console.log(districtData)\r\n  return (\r\n    <div style={{ maxWidth: \"100%\" }} className={containerClassName || \"\"}>\r\n      <svg viewBox=\"0 0 799.861 460.414\">\r\n        <g transform=\"translate(-0.251 6.456)\">\r\n          {zoneMapData.map((item, index) => {\r\n            // red[districtData[item.name.toLowerCase()] * 1000 / maxValue]\r\n            // console.log(`rgba(${districtData[item.name.toLowerCase()]/maxValue * 255}, ${255}, ${255}, 1)`)\r\n            // console.log(districtData[item.name.toLowerCase()]/maxValue)\r\n            // console.log(districtData)\r\n\r\n            const numberOfStudents = zoneData.hasOwnProperty(\r\n              item.name.toLowerCase()\r\n            )\r\n              ? zoneData[item.name.toLowerCase()]\r\n              : 0;\r\n\r\n            const normalized = (numberOfStudents / maxValue) * 80;\r\n\r\n            const color = `hsl(200, 100%, ${100 - normalized}%)`;\r\n\r\n            return (\r\n              <Tooltip\r\n                key={item.zip}\r\n                classes={{ tooltip: classes.tooltip }}\r\n                title={camelize(item.name) + \" \" + numberOfStudents}\r\n                placement=\"top\"\r\n                arrow\r\n              >\r\n                <path\r\n                  className={sectorClassName || \"\"}\r\n                  style={{ cursor: \"pointer\", fill: color }}\r\n                  key={index}\r\n                  transform={item.code === \"MA\" ? \"translate(597 306.286)\" : \"\"}\r\n                  stroke={stroke || \"#000\"}\r\n                  strokeWidth={strokeWidth || \"1px\"}\r\n                  d={item.shape}\r\n                  onClick={() => handleMapClick(item)}\r\n                  onMouseOver={(event) => {\r\n                    // event.target.style.fill = hoverColor || defaultColor\r\n                  }}\r\n                  onMouseOut={(event) => {\r\n                    // event.target.style.fill = pathColor\r\n                  }}\r\n                ></path>\r\n              </Tooltip>\r\n            );\r\n          })}\r\n        </g>\r\n      </svg>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Dell\\Desktop\\project\\backend_admission\\priority-analyser-frontend\\src\\Location\\District.js",["131","132","133","134"],"import React from \"react\";\r\nimport districtMapData from \"./metadata/districtMapData\";\r\nimport red from \"@material-ui/core/colors/red\";\r\n\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nconst defaultColor = \"green\";\r\nconst pathColor = \"#f0ece1\";\r\nconst getRandomColor = () => {\r\n  return \"#f0ece1\";\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  tooltip: {\r\n    backgroundColor: theme.palette.common.white,\r\n    color: \"rgba(0, 0, 0, 0.87)\",\r\n    boxShadow: theme.shadows[1],\r\n    fontSize: \"inherit\",\r\n    borderRadius: \"5px\",\r\n  },\r\n}));\r\n\r\nexport default function DistrictMap({\r\n  onMapClick,\r\n  sectorClassName,\r\n  containerClassName,\r\n\r\n  stroke,\r\n  strokeWidth,\r\n  districtData,\r\n  maxValue,\r\n}) {\r\n  const handleMapClick = (item) => {\r\n    if (onMapClick) {\r\n      onMapClick({\r\n        name: item.name,\r\n        zip: item.zip,\r\n        province: item.province,\r\n        area: item.area,\r\n      });\r\n    }\r\n  };\r\n\r\n  function camelize(string) {\r\n    return string.charAt(0).toUpperCase() + string.slice(1);\r\n  }\r\n\r\n  const classes = useStyles();\r\n  // console.log(districtData)\r\n  return (\r\n    <div style={{ maxWidth: \"100%\" }} className={containerClassName || \"\"}>\r\n      <svg viewBox=\"0 0 1026.077 519.136\">\r\n        <g transform=\"translate(-52.379 -15.971)\">\r\n          {districtMapData.map((item, index) => {\r\n            // red[districtData[item.name.toLowerCase()] * 1000 / maxValue]\r\n            // console.log(`rgba(${districtData[item.name.toLowerCase()]/maxValue * 255}, ${255}, ${255}, 1)`)\r\n            // console.log(districtData[item.name.toLowerCase()]/maxValue)\r\n            // console.log(districtData)\r\n\r\n            const numberOfStudents = districtData.hasOwnProperty(\r\n              item.name.toLowerCase()\r\n            )\r\n              ? districtData[item.name.toLowerCase()]\r\n              : 0;\r\n\r\n            const normalized = (numberOfStudents / maxValue) * 80;\r\n\r\n            const color = `hsl(200, 100%, ${100 - normalized}%)`;\r\n\r\n            return (\r\n              <Tooltip\r\n                key={item.zip}\r\n                classes={{ tooltip: classes.tooltip }}\r\n                title={camelize(item.name) + \" \" + numberOfStudents}\r\n                placement=\"top\"\r\n                arrow\r\n              >\r\n                <path\r\n                  className={sectorClassName || \"\"}\r\n                  style={{ cursor: \"pointer\", fill: color }}\r\n                  key={index}\r\n                  stroke={stroke || \"#000\"}\r\n                  strokeWidth={strokeWidth || \"1px\"}\r\n                  d={item.shape}\r\n                  onClick={() => handleMapClick(item)}\r\n                  onMouseOver={(event) => {\r\n                    // event.target.style.fill = hoverColor || defaultColor\r\n                  }}\r\n                  onMouseOut={(event) => {\r\n                    // event.target.style.fill = pathColor\r\n                  }}\r\n                ></path>\r\n              </Tooltip>\r\n            );\r\n          })}\r\n        </g>\r\n      </svg>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Dell\\Desktop\\project\\backend_admission\\priority-analyser-frontend\\src\\visualizations\\BarChart.js",[],"C:\\Users\\Dell\\Desktop\\project\\backend_admission\\priority-analyser-frontend\\src\\visualizations\\RangeChart.js",[],"C:\\Users\\Dell\\Desktop\\project\\backend_admission\\priority-analyser-frontend\\src\\visualizations\\PieChart.js",[],"C:\\Users\\Dell\\Desktop\\project\\backend_admission\\priority-analyser-frontend\\src\\Location\\metadata\\districtMapData.js",[],"C:\\Users\\Dell\\Desktop\\project\\backend_admission\\priority-analyser-frontend\\src\\Location\\metadata\\zoneMapData.js",[],{"ruleId":"135","severity":1,"message":"136","line":101,"column":19,"nodeType":"137","messageId":"138","endLine":101,"endColumn":27},{"ruleId":"139","severity":1,"message":"140","line":44,"column":6,"nodeType":"141","endLine":44,"endColumn":8,"suggestions":"142"},{"ruleId":"139","severity":1,"message":"140","line":15,"column":6,"nodeType":"141","endLine":15,"endColumn":8,"suggestions":"143"},{"ruleId":"139","severity":1,"message":"140","line":8,"column":6,"nodeType":"141","endLine":8,"endColumn":8,"suggestions":"144"},{"ruleId":"135","severity":1,"message":"145","line":3,"column":10,"nodeType":"137","messageId":"138","endLine":3,"endColumn":19},{"ruleId":"135","severity":1,"message":"146","line":3,"column":21,"nodeType":"137","messageId":"138","endLine":3,"endColumn":25},{"ruleId":"139","severity":1,"message":"140","line":43,"column":6,"nodeType":"141","endLine":43,"endColumn":8,"suggestions":"147"},{"ruleId":"135","severity":1,"message":"148","line":47,"column":9,"nodeType":"137","messageId":"138","endLine":47,"endColumn":15},{"ruleId":"135","severity":1,"message":"149","line":2,"column":10,"nodeType":"137","messageId":"138","endLine":2,"endColumn":20},{"ruleId":"135","severity":1,"message":"150","line":60,"column":7,"nodeType":"137","messageId":"138","endLine":60,"endColumn":11},{"ruleId":"151","severity":1,"message":"152","line":137,"column":52,"nodeType":"153","messageId":"154","endLine":137,"endColumn":54},{"ruleId":"135","severity":1,"message":"155","line":52,"column":7,"nodeType":"137","messageId":"138","endLine":52,"endColumn":13},{"ruleId":"139","severity":1,"message":"156","line":128,"column":24,"nodeType":"141","endLine":128,"endColumn":59,"suggestions":"157"},{"ruleId":"158","severity":1,"message":"159","line":139,"column":19,"nodeType":"160","messageId":"161","endLine":139,"endColumn":21},{"ruleId":"135","severity":1,"message":"162","line":3,"column":8,"nodeType":"137","messageId":"138","endLine":3,"endColumn":11},{"ruleId":"135","severity":1,"message":"163","line":7,"column":7,"nodeType":"137","messageId":"138","endLine":7,"endColumn":19},{"ruleId":"135","severity":1,"message":"164","line":8,"column":7,"nodeType":"137","messageId":"138","endLine":8,"endColumn":16},{"ruleId":"135","severity":1,"message":"165","line":9,"column":7,"nodeType":"137","messageId":"138","endLine":9,"endColumn":21},{"ruleId":"135","severity":1,"message":"162","line":3,"column":8,"nodeType":"137","messageId":"138","endLine":3,"endColumn":11},{"ruleId":"135","severity":1,"message":"163","line":7,"column":7,"nodeType":"137","messageId":"138","endLine":7,"endColumn":19},{"ruleId":"135","severity":1,"message":"164","line":8,"column":7,"nodeType":"137","messageId":"138","endLine":8,"endColumn":16},{"ruleId":"135","severity":1,"message":"165","line":9,"column":7,"nodeType":"137","messageId":"138","endLine":9,"endColumn":21},"no-unused-vars","'location' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setCurrentPage'. Either include it or remove the dependency array. If 'setCurrentPage' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["166"],["167"],["168"],"'lightBlue' is defined but never used.","'grey' is defined but never used.",["169"],"'styles' is assigned a value but never used.","'makeStyles' is defined but never used.","'rows' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'colors' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'transformData'. Either include it or remove the dependency array.",["170"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'red' is defined but never used.","'defaultColor' is assigned a value but never used.","'pathColor' is assigned a value but never used.","'getRandomColor' is assigned a value but never used.",{"desc":"171","fix":"172"},{"desc":"171","fix":"173"},{"desc":"171","fix":"174"},{"desc":"171","fix":"175"},{"desc":"176","fix":"177"},"Update the dependencies array to be: [setCurrentPage]",{"range":"178","text":"179"},{"range":"180","text":"179"},{"range":"181","text":"179"},{"range":"182","text":"179"},"Update the dependencies array to be: [minRank, maxRank, selectedCollege, transformData]",{"range":"183","text":"184"},[1032,1034],"[setCurrentPage]",[400,402],[238,240],[946,948],[3621,3656],"[minRank, maxRank, selectedCollege, transformData]"]